#!/usr/bin/env python3

import os
import sys
import json
import argparse

from functions import *


# parse arguments from the cli. Only for testing/advanced use. All other parameters are handled by cli_input.py
def process_args():
    parser = argparse.ArgumentParser()
    # parser.add_argument('-l', '--local-path', dest="local_path",
    #                     help="Use local files, instead of downloading from the internet (not recommended).")
    parser.add_argument("-v", "--verbose", action="store_true", dest="verbose", default=True,
                        help="Print more output")
    # parser.add_argument("-d", "--debug", action="store_true", dest="debug", default=False,
    #                     help="Debug purpose, might do nothing for final user")
    parser.add_argument("-b", "--board_name", dest="board_name", type=str, nargs=1, default=[""],
                        help="Override board name. FOR TESTING ONLY")
    return parser.parse_args()


def avs_audio(platform):
    print_status("Installing AVS")
    # TODO: add support for avs
    print_error("avs audio is not implemented yet!")


def apl_audio():
    # TODO: add a selection to use either sof or avs
    avs_audio("apl")


def sof_audio(platform, username):
    print_status("Installing SOF")
    # Install required packages
    # Sof firmware needs to be reinstalled for some reason.
    install_package("sof-firmware", "firmware-sof-signed", "alsa-sof-firmware", reinstall=True)
    # linux-firmware has different names on ubuntu and debian
    with open("/etc/os-release") as f:
        if "ubuntu" in f.read():
            install_package(deb_package="linux-firmware")
        else:
            install_package("linux-firmware", "firmware-linux-free firmware-linux-nonfree", "linux-firmware")
    install_package("alsa-utils", "alsa-utils", "alsa-utils")

    # Force sof driver
    cpfile(f"{config_path}/audio/sof/alsa-sof.conf", "/etc/modprobe.d/alsa-sof.conf")

    # Ucm for glk
    if platform == "glk":
        # Some distros (arch) are starting to package ucm for sof-glkda7219max in alsa-ucm-conf
        update_system()
        install_package("alsa-ucm-conf", "alsa-ucm-conf", "alsa-ucm-conf")
        mkdir("/usr/share/alsa/ucm2/Intel")  # directory might not exist
        if "sof-glkda7219max" not in os.listdir("/usr/share/alsa/ucm2/Intel"):
            cpdir(f"{config_path}/audio/sof/sof-glkda7219max/", "/usr/share/alsa/ucm2/Intel/sof-glkda7219max/")
            cpdir(f"{config_path}/audio/sof/da7219/", "/usr/share/alsa/ucm2/codecs/da7219/")


def str_audio():
    print_status("Installing STR")
    print_error("str audio not implemented yet")


def bsw_audio():
    print_status("Fixing braswell audio")
    cpfile(f"{config_path}/audio/sof/bsw-sof.conf", "/etc/modprobe.d/bsw-sof.conf")


def zen2_audio(username):
    print_status("Installing zen2 audio")
    update_system()
    # if not bash("ps -e").__contains__("pipewire") # it's a dependency of gnome so it's always running
    with open("/tmp/eupnea-audio/pactl", "r") as file:
        pactl = file.read()  # pactl was run at the start as non-root
    rmfile("/tmp/eupnea-audio/pactl")
    if not ("PipeWire" in pactl): 
        print_status("PipeWire is not running, installing it")
        if Path("/usr/bin/pacman").exists():
            # bash("pacman -S --noconfirm wireplumber")
            # install pipewire by wireplumber provider and yes erease pulse-audio
            print_warning("Please accept any further transaction. (enter '1','y','y','y')")
            bash("pacman -S pipewire-pulse")
            # Enable + start pipewire
            bash(f"systemctl --machine={username}@.host --user enable pipewire.service")
            bash(f"systemctl --machine={username}@.host --user start pipewire.service")
            # Enable + start pipewire-pulse
            #bash(f"systemctl --machine={username}@.host --user enable pipwire-pulse.service")
            #bash(f"systemctl --machine={username}@.host --user start pipwire-pulse.service")
            # bash(f"systemctl --machine={username}@.host --user --now enable wireplumber.service")  # enable wireplumber

        elif path_exists("/usr/bin/apt"):
            with open("/etc/os-release", "r") as file:
                os_release = file.read().lower()
            # Remove pulseaudio and install pipewire on ubuntu 22.04 or 22.10
            # On 22.10 some DEs might still use pulseaudio
            if "ubuntu 22.10" in os_release or "ubuntu 22.04" in os_release:
                # https://ubuntuhandbook.org/index.php/2022/04/pipewire-replace-pulseaudio-ubuntu-2204/
                install_package(deb_package="pipewire pipewire-pulse")
                bash("apt-get remove -y pulseaudio-module-bluetooth")  # Remove pulseaudio bluetooth module
                install_package(deb_package="pipewire-audio-client-libraries libspa-0.2-bluetooth libspa-0.2-jack "
                                            "wireplumber pipewire-media-session-")

                # copy config files
                cpfile("/usr/share/doc/pipewire/examples/alsa.conf.d/99-pipewire-default.conf",
                       "/etc/alsa/conf.d/99-pipewire-default.conf")
                cpfile("/usr/share/doc/pipewire/examples/ld.so.conf.d/pipewire-jack-x86_64-linux-gnu.conf",
                       "/etc/ld.so.conf.d/pipewire-jack-x86_64-linux-gnu.conf")
                bash("ldconfig")  # auto-create links

                # enable wireplumber
                bash(f"systemctl --machine={username}@.host --user --now enable wireplumber.service")

            elif "debian gnu/linux 11 (bullseye)" in os_release:
                # https://trendoceans.com/install-pipewire-on-debian-11/
                bash("sudo apt-get install -y pipewire pipewire-audio-client-libraries")
                open("/etc/pipewire/media-session.d/with-pulseaudio",
                     'a').close()  # create an empty file
                cpfile("/usr/share/doc/pipewire/examples/systemd/user/pipewire-pulse.service",
                       "/etc/systemd/user/pipewire-pulse.service")
                cpfile("/usr/share/doc/pipewire/examples/systemd/user/pipewire-pulse.socket",
                       "/etc/systemd/user/pipewire-pulse.socket")

                # Reload systemd configs
                bash(f"systemctl --machine={username}@.host --user daemon-reload")
                # fully disable pulseaudio
                bash(f"systemctl --machine={username}@.host --user --now disable pulseaudio.service pulseaudio.socket")
                bash(f"systemctl --machine={username}@.host --user mask pulseaudio")
                # enable pipewire
                bash(f"systemctl --machine={username}@.host --user --now enable pipewire pipewire-pulse")
        else:
            print_error(f"Something went wrong => open a github issue or create a post on the discord\nError: Distro "
                        f"not recognized (zen2 audio)")
            exit(1)
    else:
        print_status("PipeWire is already configured")

    # remove old files
    rmdir("/usr/share/alsa/ucm2/AMD/acp3xalc5682m98/")
    rmdir("/usr/share/alsa/ucm2/conf.d/acp3xalc5682m98")

    # clone repo
    bash("git clone https://github.com/alsa-project/alsa-ucm-conf/ /tmp/eupnea-audio")

    # Make directories
    mkdir("/usr/share/alsa/ucm2/AMD/acp3xalc5682m98/", create_parents=True)
    mkdir("/usr/share/alsa/ucm2/conf.d/acp3xalc5682m98", create_parents=True)

    # copy ucm configs
    cpfile("/tmp/eupnea-audio/ucm2/AMD/acp3xalc5682m98/HiFi.conf",
           "/usr/share/alsa/ucm2/AMD/acp3xalc5682m98/HiFi.conf")
    cpfile("/tmp/eupnea-audio/ucm2/AMD/acp3xalc5682m98/acp3xalc5682m98.conf",
           "/usr/share/alsa/ucm2/AMD/acp3xalc5682m98/acp3xalc5682m98.conf")
    bash("cd /usr/share/alsa/ucm2/conf.d/acp3xalc5682m98 ; ln ../../AMD/acp3xalc5682m98/acp3xalc5682m98.conf")


def post_misc() -> None:
    """
    Perform misc operation to fix sound\n
    Global to every device
    """
    # Xfce sound mixer
    de = bash("echo $XDG_CURRENT_DESKTOP")
    if de == "XFCE":
        install_package("xfce4-pulseaudio-plugin", "xfce4-pulseaudio-plugin", "xfce4-pulseaudio-plugin")


def install_package(arch_package: str = "", deb_package: str = "", rpm_package: str = "", reinstall: bool = False):
    if Path("/usr/bin/pacman").exists():
        if reinstall:
            bash(f"pacman -S --noconfirm {arch_package}")
        else:
            bash(f"pacman -S --noconfirm --needed {arch_package}")
    elif Path("/usr/bin/apt").exists():
        if reinstall:
            bash(f"apt-get install -y --reinstall {deb_package}")
        else:
            bash(f"apt-get install -y {deb_package}")
    elif Path("/usr/bin/dnf").exists():
        if reinstall:
            bash(f"dnf reinstall -y {rpm_package}")
        else:
            bash(f"dnf install -y {rpm_package}")
    else:
        print_error(f"Unknown package manager! Please install {deb_package} using your package manager.")
        exit(1)


def remove_package(arch_package: str = "", deb_package: str = "", rpm_package: str = ""):
    if Path("/usr/bin/pacman").exists():
        bash(f"pacman -Rsn --noconfirm {arch_package}")
    elif Path("/usr/bin/apt").exists():
        bash(f"apt-get remove -y {deb_package}")
    elif Path("/usr/bin/dnf").exists():
        bash(f"dnf remove -y {rpm_package}")
    else:
        print_error(f"Unknown package manager! Please remove {deb_package} using your package manager.")
        exit(1)


def update_system() -> None:
    if Path("/usr/bin/pacman").exists():
        bash(f"pacman -Syu")
    elif Path("/usr/bin/apt").exists():
        bash(f"apt-get update")
        bash(f"apt-get -y upgrade")
    elif Path("/usr/bin/dnf").exists():
        bash(f"dnf upgrade -y")
    else:
        print_warning("Unknown package manager! Cannot update system. Skipping")
        pass


if __name__ == "__main__":
    if os.geteuid() == 0 and not path_exists("/tmp/username"):
        print_error("Please start the script as non-root/without sudo")
        exit(1)

    args = process_args()  # process args before elevating to root for better ux

    # Restart script as root
    if not os.geteuid() == 0:
        # Get pactl info
        mkdir("/tmp/eupnea-audio")
        if path_exists("/usr/bin/pactl"):
            pactl_info_tmp = bash("pactl info")  # pactl must run as not root

        else:  # pactl might not always be installed => install it
            print_status("pactl not found, Installing pulseaudio-utils")
            update_system()
            install_package("alsa-utils", "alsa-utils", "alsa-utils")
            install_package("libpulse", "pulseaudio-utils", "pulseaudio-utils")
            pactl_info_tmp = bash("pactl info")  # pactl must run as not root
        with open("/tmp/eupnea-audio/pactl", "w") as file:
            file.write(pactl_info_tmp)
        # save username
        with open("/tmp/username", "w") as file:
            # get non root username. os.getlogin() seems to fail in chroots
            file.write(bash("whoami").strip())

        # restart script as root
        sudo_args = ['sudo', sys.executable] + sys.argv + [os.environ]
        os.execlpe('sudo', *sudo_args)

    # read username
    with open("/tmp/username", "r") as file:
        user_id = file.read()

    if args.verbose:
        print_warning("Verbosity increased")
        set_verbose(args.verbose)

    ## Remove old files
    #rmdir("/tmp/eupnea-audio")
    #mkdir("/tmp/eupnea-audio")

    # Important message
    print_warning("WARNING: this audio script is not fully functional yet!")

    # Determine if running from a git clone or a eupnea system
    if path_exists("/etc/eupnea"):
        config_path = "/etc/eupnea"
    else:
        config_path = "configs"

    if args.board_name[0] == "":
        # Get the board name from dmi
        with open("/sys/devices/virtual/dmi/id/product_name", "r") as dmi:
            device_board = dmi.read().lower().strip()
    else:  # use the board name from the args, for testing only
        device_board = str(args.board_name[0]).lower().strip()
        print_warning(f"Board name overriden to: {device_board}")

    with open(f"{config_path}/audio/board-generations.json", "r") as file:
        boards = json.load(file)

    try:
        match boards[device_board]:
            case "bsw":
                bsw_audio()
            case "skl":
                avs_audio("skl")
            case "kbl":
                avs_audio("skl")
            case "apl":
                apl_audio()
            case "glk":
                sof_audio("glk", user_id)
            case "whl":
                sof_audio("whl", user_id)
            case "cml":
                sof_audio("cml", user_id)
            case "jsl":
                sof_audio("jsl", user_id)
            case "tgl":
                sof_audio("tgl", user_id)
            case "str":
                str_audio()
            case "zen2":
                zen2_audio(user_id)
            case _:
                print_error(f"Unknown/Unsupported chromebook model: {device_board}")
                exit(1)
    except KeyError:
        print_error(f"Unknown/Unsupported chromebook model: {device_board}")
        exit(1)

    # Perform misc operation
    post_misc()

    print_header("Audio installed successfully! Reboot to enable audio.")
    input("\033[92m" + "Press ENTER to reboot or CTRL+C to cancel reboot" + "\033[0m")
    bash("reboot")
    sleep(5)
